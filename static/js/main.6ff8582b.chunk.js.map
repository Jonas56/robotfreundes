{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardsList.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","username","email","CardsList","cardArray","robots","map","user","i","key","Searchbox","type","placeholder","onChange","onSearchChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","e","searchfield","target","value","fetch","then","response","json","users","filtredRobots","filter","robot","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"6KAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbF,SAACC,GACZ,OACE,yBAAKC,UAAU,+DACb,yBAAKC,IAAI,aAAaC,IAAG,gCAA2BH,EAAMI,MAC1D,6BACE,4BAAKJ,EAAMK,MACX,4BAAKL,EAAMM,UACX,2BAAIN,EAAMO,UCYHC,EAlBG,SAACR,GAIjB,IAAMS,EAAYT,EAAMU,OAAOC,KAAI,SAACC,EAAMC,GACxC,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLT,GAAIJ,EAAMU,OAAOG,GAAGT,GACpBE,SAAUN,EAAMU,OAAOG,GAAGP,SAC1BC,MAAOP,EAAMU,OAAOG,GAAGN,MACvBF,KAAML,EAAMU,OAAOG,GAAGR,UAI5B,OAAO,6BAAMI,ICHAM,EAbG,SAACf,GACjB,OACE,yBAAKC,UAAU,QACb,2BACEe,KAAK,SACLC,YAAY,oBACZC,SAAUlB,EAAMmB,eAChBlB,UAAU,uCCOHmB,EAdA,SAACpB,GACd,OACE,yBACEqB,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAGTxB,EAAMyB,WCSEC,E,kDAjBb,WAAY1B,GAAQ,IAAD,8BACjB,cAAMA,IACD2B,MAAQ,CACXC,UAAU,GAHK,E,8DAMDC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,6BAErB5B,GACL,OAAI+B,KAAKJ,MAAMC,SACN,6DAEFG,KAAK/B,MAAMyB,a,GAdMQ,IAAMC,WC4CnBC,E,kDAvCb,WAAYnC,GAAQ,IAAD,8BACjB,cAAMA,IAWRmB,eAAiB,SAACiB,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAEE,OAAOC,SAXtC,EAAKZ,MAAQ,CACXjB,OAAQ,GACR2B,YAAa,IAJE,E,gEAOE,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKZ,SAAS,CAAEtB,OAAQkC,S,+BAKnC,IAAD,OACDC,EAAgBd,KAAKJ,MAAMjB,OAAOoC,QAAO,SAACC,GAC9C,OAAOA,EAAM1C,KACV2C,cACAC,SAAS,EAAKtB,MAAMU,YAAYW,kBAErC,OAAKjB,KAAKJ,MAAMjB,OAAOwC,OAInB,yBAAKjD,UAAU,cACb,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWkB,eAAgBY,KAAKZ,iBAChC,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAWT,OAAQmC,OARpB,+C,GAvBKZ,IAAMC,W,MCCxBiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SP4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAA/B,GACLgC,QAAQhC,MAAMA,EAAMiC,a","file":"static/js/main.6ff8582b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className=\"tc georgia bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robotphoto\" src={`https://robohash.org/z${props.id}`} />\r\n      <div>\r\n        <h2>{props.name}</h2>\r\n        <h3>{props.username}</h3>\r\n        <p>{props.email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardsList = (props) => {\r\n  // if (true) {\r\n  //   throw new Error(\"Oooops!!\");\r\n  // }\r\n  const cardArray = props.robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={props.robots[i].id}\r\n        username={props.robots[i].username}\r\n        email={props.robots[i].email}\r\n        name={props.robots[i].name}\r\n      />\r\n    );\r\n  });\r\n  return <div>{cardArray}</div>;\r\n};\r\n\r\nexport default CardsList;\r\n","import React from \"react\";\r\n\r\nconst Searchbox = (props) => {\r\n  return (\r\n    <div className=\"pa2 \">\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"type a robot name\"\r\n        onChange={props.onSearchChange}\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Searchbox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: \"scroll\",\r\n        border: \"2px solid black\",\r\n        height: \"800px\",\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n  render(props) {\r\n    if (this.state.hasError) {\r\n      return <h1>Error during compilation ! ! </h1>;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React from \"react\";\r\nimport CardsList from \"../Components/CardsList\";\r\nimport Searchbox from \"../Components/Searchbox\";\r\nimport Scroll from \"../Components/Scroll\";\r\nimport ErrorBoundary from \"../Components/ErrorBoundary\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\",\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => this.setState({ robots: users }));\r\n  }\r\n  onSearchChange = (e) => {\r\n    this.setState({ searchfield: e.target.value });\r\n  };\r\n  render() {\r\n    const filtredRobots = this.state.robots.filter((robot) => {\r\n      return robot.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchfield.toLowerCase());\r\n    });\r\n    if (!this.state.robots.length) {\r\n      return <h1>Loading ...</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"georgia tc\">\r\n          <h1 className=\"f1\">RobotFreinds</h1>\r\n          <Searchbox onSearchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <ErrorBoundary>\r\n              <CardsList robots={filtredRobots} />\r\n            </ErrorBoundary>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport App from \"./Containers/App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}